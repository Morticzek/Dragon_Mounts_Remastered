name: Automatic Build Pipeline

on:
  workflow_call:
    inputs:
      changelog:
        required: true
        description: "The changelog for the release"
        type: string
      new_release_version:
        required: true
        description: "The new version of the release"
        type: string

permissions:
  contents: write

jobs:
  common-setup:
    runs-on: ubuntu-latest
    outputs:
      java_version: ${{ steps.read_props.outputs.java_version }}
      minecraft_version: ${{ steps.read_props.outputs.minecraft_version }}
      neo_version: ${{ steps.read_props.outputs.neo_version }}
      geckolib_version: ${{ steps.read_props.outputs.geckolib_version }}
      mod_name: ${{ steps.read_props.outputs.mod_name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Read gradle.properties and set outputs
        id: read_props
        run: |
          while IFS='=' read -r key value; do
            key=$(echo "$key" | xargs)
            value=$(echo "$value" | xargs)
            [[ -z "$key" || "$key" == \#* ]] && continue
            echo "$key=$value" >> $GITHUB_ENV
            echo "$key=$value" >> $GITHUB_OUTPUT
            echo "$key=$value"
          done < gradle.properties

  java-build:
    name: Java Build
    runs-on: ubuntu-latest
    needs: common-setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ needs.common-setup.outputs.java_version }}
          distribution: "temurin"
          cache: "gradle"

      - name: Update gradle.properties
        run: sed -i "s/mod_version=.*/mod_version=${{ inputs.new_release_version }}/g" gradle.properties

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: dragon-mounts-jar
          path: build/libs/*.jar

  replace-placeholders:
    name: Replace Placeholders
    runs-on: ubuntu-latest
    needs: common-setup
    strategy:
      matrix:
        file: [cf_upload.json, modrinth_upload.json]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Fetch Game Version IDs
        if: ${{ matrix.file == 'cf_upload.json' }}
        id: fetch_ids
        continue-on-error: true
        env:
          CF_API_KEY: ${{ secrets.CF_API_KEY }}
          MC_VERSION: ${{ needs.common-setup.outputs.minecraft_version }}
        run: |
          # Fetch game versions from CurseForge API and extract IDs
          GAME_VERSIONS=$(curl -s "https://minecraft.curseforge.com/api/game/versions" -H "X-Api-Token: ${{ env.CF_API_KEY}}")
          echo "JAVA_VERSION_ID=$(echo "$GAME_VERSIONS" | jq -r '.[] | select(.name == "Java 17") | .id | tonumber')" >> $GITHUB_ENV
          echo "CLIENT_VERSION_ID=$(echo "$GAME_VERSIONS" | jq -r '.[] | select(.name == "Client") | .id | tonumber')" >> $GITHUB_ENV
          echo "SERVER_VERSION_ID=$(echo "$GAME_VERSIONS" | jq -r '.[] | select(.name == "Server") | .id | tonumber')" >> $GITHUB_ENV
          echo "NEOFORGE_VERSION_ID=$(echo "$GAME_VERSIONS" | jq -r '.[] | select(.name == "NeoForge") | .id | tonumber')" >> $GITHUB_ENV
          echo "MC_VERSION_ID=$(echo "$GAME_VERSIONS" | jq -r --arg mc_ver "$MC_VERSION" '.[] | select(.name == $mc_ver) | .id | tonumber')" >> $GITHUB_ENV

      - name: Replace Placeholders in ${{ matrix.file }}
        run: envsubst < ./.github/workflows/${{ matrix.file }} > temp && mv temp ./.github/workflows/${{ matrix.file }}
        env:
          changelog: ${{ inputs.changelog }}
          mod_name: ${{ needs.common-setup.outputs.mod_name }}
          new_release_version: ${{ inputs.new_release_version }}
          minecraft_version: ${{ needs.common-setup.outputs.minecraft_version }}
          neo_version: ${{ needs.common-setup.outputs.neo_version }}
          geckolib_version: ${{ needs.common-setup.outputs.geckolib_version }}
          mod_version: ${{ inputs.new_release_version }}
          java_version_id: ${{ env.JAVA_VERSION_ID }}
          client_version_id: ${{ env.CLIENT_VERSION_ID }}
          server_version_id: ${{ env.SERVER_VERSION_ID }}
          neoforge_version_id: ${{ env.NEOFORGE_VERSION_ID }}
          mc_version_id: ${{ env.MC_VERSION_ID }}

      - name: Verify Placeholders Replaced
        run: |
          if grep -q '\${' ./.github/workflows/${{ matrix.file }}; then
            echo "Error: Unresolved placeholders in ${{ matrix.file }}" >&2
            exit 1
          fi

      - name: Upload Processed File
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.file }}
          path: ./.github/workflows/${{ matrix.file }}

  confirm-upload:
    name: Confirm Upload
    runs-on: ubuntu-latest
    needs: [replace-placeholders, java-build]
    environment: Release
    steps:
      - name: Confirm Upload
        run: echo "All files processed successfully"

  upload-curseforge:
    name: Upload to CurseForge
    runs-on: ubuntu-latest
    needs: [confirm-upload]
    steps:
      - name: Download Processed cf_upload.json
        uses: actions/download-artifact@v4
        with:
          name: cf_upload.json
          path: ./

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: dragon-mounts-jar
          path: build/libs/

      - name: Upload to CurseForge
        env:
          CF_API_KEY: ${{ secrets.CF_API_KEY }}
          CF_PROJECT_ID: ${{ secrets.CF_PROJECT_ID }}
        run: |
          FILE_PATH=$(find build/libs -name "*.jar" | head -n 1)
          curl --fail-with-body -X POST "https://minecraft.curseforge.com/api/projects/${{ env.CF_PROJECT_ID}}/upload-file" \
            -H "X-Api-Token: ${{ env.CF_API_KEY}}" \
            -F "metadata=@cf_upload.json" \
            -F "file=@$FILE_PATH"

  upload-modrinth:
    name: Upload to Modrinth
    runs-on: ubuntu-latest
    needs: [confirm-upload]
    steps:
      - name: Download Processed modrinth_upload.json
        uses: actions/download-artifact@v4
        with:
          name: modrinth_upload.json
          path: ./

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: dragon-mounts-jar
          path: build/libs/

      - name: Upload to Modrinth
        env:
          MODRINTH_API_KEY: ${{ secrets.MODRINTH_API_KEY }}
        run: |
          FILE_PATH=$(find build/libs -name "*.jar" | head -n 1)
          curl --fail-with-body -X POST "https://api.modrinth.com/v2/version" \
            -H "Authorization: ${{ env.MODRINTH_API_KEY}}" \
            -F "data=@modrinth_upload.json" \
            -F "file=@$FILE_PATH"

  after-release:
    name: Post-Release Notification
    runs-on: ubuntu-latest
    needs: [upload-curseforge, upload-modrinth]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Notify Discord
        uses: Sniddl/discord-commits@v1.6
        with:
          webhook: ${{ secrets.DISCORD_ANNOUNCEMENT_WEBHOOK_URL }}
          message: "Version ${{ inputs.new_release_version }} of ${{ needs.common-setup.outputs.mod_name }} has been released!"
          embed: |
            {
              "description": "Changelog:\n${{ inputs.changelog }}"
            }
